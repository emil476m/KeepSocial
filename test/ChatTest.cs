using System.Collections;
using System.Net;
using System.Net.Http.Headers;
using System.Net.Http.Json;
using Dapper;
using FluentAssertions;
using FluentAssertions.Execution;
using Infastructure;
using Newtonsoft.Json;

namespace test;

[TestFixture]
public class ChatTest
{
    private string resetbd = $@"
DROP SCHEMA IF EXISTS keepsocial CASCADE;
CREATE SCHEMA keepsocial;

create table if not exists keepsocial.users (
    id integer generated by default as identity,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL,
    birthday DATE,
    avatarUrl VARCHAR,
    isDeleted boolean NOT NULL,
    constraint userpk
        primary key (id)
);

create table if not exists keepsocial.password_hash (
    user_id integer,
    hash VARCHAR(350) NOT NULL ,
    salt VARCHAR(180) NOT NULL ,
    algorithm VARCHAR(12) NOT NULL ,
    FOREIGN KEY(user_id) REFERENCES keepsocial.users(id)
);

create table if not exists keepsocial.chatrooms (
    rom_id integer generated by default as identity,
    rom_name VARCHAR,

    primary key (rom_id)
);

create table if not exists keepsocial.posts
(
    id integer generated by default as identity,
    author_id integer not null ,
    text VARCHAR(500) not null ,
    img_url VARCHAR,
    created timestamp not null,
    constraint postpk
        primary key (id),
    foreign key(author_id) references keepsocial.users(id)
);

create table if not exists keepsocial.chatroomUsersRealation (
    rom_id integer ,
    user_id integer,

    FOREIGN KEY(rom_id) REFERENCES keepsocial.chatrooms(rom_id),
    FOREIGN KEY(user_id) REFERENCES keepsocial.users(id)
);

create table if not exists keepsocial.messages (
    rom_id integer,
    user_id integer,
    message VARCHAR,
    time_Send timestamp,

    FOREIGN KEY(rom_id) REFERENCES keepsocial.chatrooms(rom_id),
    FOREIGN KEY(user_id) REFERENCES keepsocial.users(id)
);

create table if not exists keepsocial.friendRealeatioj
(
    user1_id integer,
    user2_id integer,

    FOREIGN KEY (user1_id) REFERENCES keepsocial.users (id),
    FOREIGN KEY (user2_id) REFERENCES keepsocial.users (id)
);

create table if not exists keepsocial.validationnumbers
(
  user_id integer NOT NULL,
  validation_number integer NOT NULL,
  FOREIGN KEY (user_id) REFERENCES keepsocial.users(id)
);

create table if not exists keepsocial.comments
(
   id bigint generated by default as identity,
   post_id integer not null,
   author_id integer not null,
   text VARCHAR(500) not null,
   img_url varchar,
   created timestamp not null,
   primary key (id),
   foreign key(post_id) references keepsocial.posts(id),
   foreign key (author_id) references keepsocial.users(id)
);

insert into keepsocial.users(id,name,email,birthday,isdeleted) values (111,'test tester','test@email.com',date('2023-02-24'),false);
insert into keepsocial.password_hash(user_id,hash,salt,algorithm) values (111,'6Po8CEcjkfC5Scoze2n5WoI7yLFePCZlEmQNPY9M0UFP0ghMegnM2t3k8HpcE/EkdYxOPJDj1XBM9J47eOdON6N9thahuXvlbY3D8Ag/y1JgHNw2ea6E5l1VWVSz7kCrQudnazfVTMQuce4emRjSLSAZAaoF55zXmBYjFOqZ5xX13TV5/UJUPkKf7uRKGNyTf1o/LlnZqmMsziF6unmCZTBgpn3W1oHr3zSh2Xm7dohmVN8+eDXPchVhUTha4u7QG75EFsILQfgALPDt3N/DUX/pHKBTVGcMAQWX1zAKyXdNPsp3MtiioBFnsJ+Zpn37mTRWNAPUMojvFekGGvb9zQ==','WwoEFhsDKJMTyb4GzbfV8inzImVI404JZSeQXWoptlUaZmuoTrKq5b/5WIqIXpeDuny7WbgDf3Hi3SuK1EmPNqTxGNbSJk3bPxufdhxwlaPXHa4vPOajEqdtLDqD+WpjvF5QK/oSTS/XB8Rj0oY0BOqW/k+KBiMTjyNc2fjJEpQ=','argon2id');
insert into keepsocial.users(id,name,email,birthday,isdeleted) values (112,'test','secondtestUser@email.com',date('2023-02-10'),false);
insert into keepsocial.password_hash(user_id,hash,salt,algorithm) values (112,'UhmSA3bJX5Owp8bm89NwO3V7VwSopx5vfBEFEAHnLKDSYzYxf7s/bNGG6VXLukD3N/hn+yUNJjnn120rrg7THpGf/8SzzrrSeMYWZ9xYA0bOfgR+lFl4zcrfy+vlgnudg1aHYVaj52VBodirzEg+cwg1JaXf51Rl8DRd+NFLO9OA1avvbkKwx+Ww2PX1nACHUqzKd/WzvSJLNYaRizLj95hRqRlRj44HyrID4unMCLIW87NN0j9UJ0Firo9u7xje1gZCz419IA1SABPRZcW+Gr6OIGPZeG2riTqluJuJgANyeIBPKAw7MXSO8Vz6THER5Jzbvl4Rwz/pMQ1eblmbJQ==','x4eVwCCfnM6132etvWCFHZV8ZN55E0h4BoR39AJRMeGoZ7xXUToBWjZoFSb9d1Ilu0wx3TN52dvh5qNo0cdodCaXREIWluHOv+ia+jfldvhTI9BQEsNKmEQSnV/TaAeBV1Kx+9GMICb0ZiZDxUTYMfjiHRByGGXK+dfRvoOIgcA=','argon2id');


";

    private string apirUrl = "";
    private HttpClient _httpClient;

    [SetUp]
    public void Setup()
    {
        _httpClient = new HttpClient();
        _httpClient.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", Environment.GetEnvironmentVariable("testToken"));
        apirUrl = "http://localhost:5000/api/";
    }

    [Test]
    public async Task createfriendChat()
    {
        string apicall = apirUrl + "friendChat112";
        Helper.TriggerRebuild(resetbd);

        var sqlSetFriend = $@"INSERT INTO keepsocial.friendRealeatioj(user1_id, user2_id) VALUES (111, 112);";
        using (var conn = Helper.DataSource.OpenConnection())
        {
            conn.Query(sqlSetFriend);
        }

        HttpResponseMessage responseMessage;
        try
        {
            responseMessage = await _httpClient.GetAsync(apicall);
            TestContext.WriteLine("full body response: " + await responseMessage.Content.ReadAsStringAsync());
        }
        catch (Exception e)
        {
            throw new Exception("Failed to create chat room", e);
        }

        Rooms response;

        try
        {
            response = JsonConvert.DeserializeObject<Rooms>(await responseMessage.Content.ReadAsStringAsync()) ??
                       throw new InvalidOperationException();
        }
        catch (Exception e)
        {
            throw new Exception(Helper.BadResponseBody("bad response"), e);
        }

        var sql = $@"
            select 
            keepsocial.chatrooms.rom_id as {nameof(Rooms.rom_id)},
            rom_name as {nameof(Rooms.rom_name)}
            FROM keepsocial.chatrooms
            WHERE rom_id = (SELECT b.rom_id
            FROM keepsocial.chatroomusersrealation as b
            JOIN keepsocial.chatroomusersrealation as c ON c.rom_id = b.rom_id
            WHERE b.user_id = 111 AND c.user_id = 112)
        ";

        Rooms Checkroom = null;
        using (var conn = Helper.DataSource.OpenConnection())
        {
            Checkroom = conn.QuerySingle<Rooms>(sql);
        }

        using (new AssertionScope())
        {
            responseMessage.StatusCode.Should().Be(HttpStatusCode.OK);

            response.rom_id.Should().Be(Checkroom.rom_id);
            response.rom_name.Should().Be(Checkroom.rom_name);
        }
    }

    [Test]
    public async Task createfriendChatExeptionIfNotfriend()
    {
        string apicall = apirUrl + "friendChat112";
        Helper.TriggerRebuild(resetbd);

        HttpResponseMessage responseMessage;
        try
        {
            responseMessage = await _httpClient.GetAsync(apicall);
            TestContext.WriteLine("full body response: " + await responseMessage.Content.ReadAsStringAsync());
        }
        catch (Exception e)
        {
            throw new Exception("Failed to run false friend test", e);
        }

        using (new AssertionScope())
        {
            responseMessage.StatusCode.Should().NotBe(HttpStatusCode.OK);
        }
    }

    [Test]
    public async Task OpenfriendExistingChatChat()
    {
        string apicall = apirUrl + "friendChat112";
        Helper.TriggerRebuild(resetbd);

        var sqlSetFriend = $@"INSERT INTO keepsocial.friendRealeatioj(user1_id, user2_id) VALUES (111, 112);";
        var sqlCreateRoom =
            $@"INSERT INTO keepsocial.chatrooms(rom_id, rom_name) values (101, (Select name FROM keepsocial.users WHERE keepsocial.users.id = 111) || ' ' || (Select name FROM keepsocial.users WHERE keepsocial.users.id = 112));";
        var insertUsers = $@"INSERT INTO keepsocial.chatroomUsersRealation(rom_id, user_id) values (101, 111);
                            INSERT INTO keepsocial.chatroomUsersRealation(rom_id, user_id) values (101, 112);";
        var sql = $@"
            select 
            keepsocial.chatrooms.rom_id as {nameof(Rooms.rom_id)},
            rom_name as {nameof(Rooms.rom_name)}
            FROM keepsocial.chatrooms
            WHERE rom_id = (SELECT b.rom_id
            FROM keepsocial.chatroomusersrealation as b
            JOIN keepsocial.chatroomusersrealation as c ON c.rom_id = b.rom_id
            WHERE b.user_id = 111 AND c.user_id = 112)
        ";

        Rooms Checkroom = null;
        using (var conn = Helper.DataSource.OpenConnection())
        {
            conn.Query(sqlSetFriend);
            conn.Query(sqlCreateRoom);
            conn.Query(insertUsers);
            Checkroom = conn.QuerySingle<Rooms>(sql);
        }

        HttpResponseMessage responseMessage;
        try
        {
            responseMessage = await _httpClient.GetAsync(apicall);
            TestContext.WriteLine("full body response: " + await responseMessage.Content.ReadAsStringAsync());
        }
        catch (Exception e)
        {
            throw new Exception("Failed to create chat room", e);
        }

        Rooms response;

        try
        {
            response = JsonConvert.DeserializeObject<Rooms>(await responseMessage.Content.ReadAsStringAsync()) ??
                       throw new InvalidOperationException();
        }
        catch (Exception e)
        {
            throw new Exception(Helper.BadResponseBody("bad response"), e);
        }

        using (new AssertionScope())
        {
            responseMessage.StatusCode.Should().Be(HttpStatusCode.OK);

            response.rom_id.Should().Be(Checkroom.rom_id);
            response.rom_name.Should().Be(Checkroom.rom_name);
        }
    }

    [Test]
    public async Task GetMessages()
    {
        string apicall = apirUrl + "ChatMessages101?pageNumber=1";
        Helper.TriggerRebuild(resetbd);

        var messages = $@"INSERT INTO keepsocial.messages(rom_id, user_id, message, time_Send) 
            VALUES (@room_id, @User_id, @message, @sendAt);";
        var sqlSetFriend = $@"INSERT INTO keepsocial.friendRealeatioj(user1_id, user2_id) VALUES (111, 112);";
        var sqlCreateRoom =
            $@"INSERT INTO keepsocial.chatrooms(rom_id, rom_name) values (101, (Select name FROM keepsocial.users WHERE keepsocial.users.id = 111) || ' ' || (Select name FROM keepsocial.users WHERE keepsocial.users.id = 112));";
        var insertUsers = $@"INSERT INTO keepsocial.chatroomUsersRealation(rom_id, user_id) values (101, 111);
                            INSERT INTO keepsocial.chatroomUsersRealation(rom_id, user_id) values (101, 112);";

        var m1 = new Message()
        {
            room_id = 101,
            message = "Hello",
            isSender = true,
            User_id = 111,
            sendAt = new DateTime(2023, 11, 29, 13, 12, 40, 1)
        };
        var m2 = new Message()
        {
            room_id = 101,
            message = "Nah",
            isSender = false,
            User_id = 112,
            sendAt =  new DateTime(2023, 11, 29, 13, 12, 45, 1)
        };
        var m3 = new Message()
        {
            room_id = 101,
            message = "Nah part 2",
            isSender = false,
            User_id = 112,
            sendAt =  new DateTime(2023, 11, 29, 13, 12, 48, 1)

        };
        
        var expectedMessageArray = new List<Message>();
        expectedMessageArray.Add(m1);
        expectedMessageArray.Add(m2);
        expectedMessageArray.Add(m3);
        
        Rooms Checkroom = null;
        using (var conn = Helper.DataSource.OpenConnection())
        {
            conn.Query(sqlSetFriend);
            conn.Query(sqlCreateRoom);
            conn.Query(insertUsers);

            foreach (var m in expectedMessageArray)
            {
                conn.Query(messages, new { m.room_id, m.User_id, m.message, m.sendAt });
            }
        }

        HttpResponseMessage responseMessage;
        try
        {
            responseMessage = await _httpClient.GetAsync(apicall);
            TestContext.WriteLine("full body response: " + await responseMessage.Content.ReadAsStringAsync());
        }
        catch (Exception e)
        {
            throw new Exception("Failed to get Messages", e);
        }

        List<Message> response;

        try
        {
            response = (List<Message>)(JsonConvert.DeserializeObject<IEnumerable<Message>>(await responseMessage.Content
                                           .ReadAsStringAsync()) ??
                                       throw new InvalidOperationException());
        }
        catch (Exception e)
        {
            throw new Exception(Helper.BadResponseBody("bad response"), e);
        }

        using (new AssertionScope())
        {
            responseMessage.StatusCode.Should().Be(HttpStatusCode.OK);

            for (int i = 0; i < response.Count(); i ++)
            {
                response[i].room_id.Should().Be(expectedMessageArray[i].room_id);
                response[i].message.Should().Be(expectedMessageArray[i].message);
                response[i].isSender.Should().Be(expectedMessageArray[i].isSender);
                response[i].User_id.Should().Be(expectedMessageArray[i].User_id);
            }
        }
    }
    
    [Test]
    public async Task sendChatMessageSuccces()
    {
        string apicall = apirUrl + "SenndMessage";
        Helper.TriggerRebuild(resetbd);

        var sqlSetFriend = $@"INSERT INTO keepsocial.friendRealeatioj(user1_id, user2_id) VALUES (111, 112);";
        var sqlCreateRoom =
            $@"INSERT INTO keepsocial.chatrooms(rom_id, rom_name) values (101, (Select name FROM keepsocial.users WHERE keepsocial.users.id = 111) || ' ' || (Select name FROM keepsocial.users WHERE keepsocial.users.id = 112));";
        var insertUsers = $@"INSERT INTO keepsocial.chatroomUsersRealation(rom_id, user_id) values (101, 111);
                            INSERT INTO keepsocial.chatroomUsersRealation(rom_id, user_id) values (101, 112);";

        Rooms Checkroom = null;
        using (var conn = Helper.DataSource.OpenConnection())
        {
            conn.Query(sqlSetFriend);
            conn.Query(sqlCreateRoom);
            conn.Query(insertUsers);
        }

        var body = new Message
        {
            room_id = 101,
            message = "Holla mi padre",
            isSender = true,
            User_id = 111,
            sendAt = new DateTime(2023, 11, 29, 13, 12, 48, 1)
        };

        HttpResponseMessage responseMessage;
        try
        {
            responseMessage = await _httpClient.PostAsJsonAsync(apicall, body);
            TestContext.WriteLine("full body response: " + await responseMessage.Content.ReadAsStringAsync());
        }
        catch (Exception e)
        {
            throw new Exception("Failed to send message in room", e);
        }

        Message response;

        try
        {
            response = JsonConvert.DeserializeObject<Message>(await responseMessage.Content.ReadAsStringAsync()) ??
                       throw new InvalidOperationException();
        }
        catch (Exception e)
        {
            throw new Exception(Helper.BadResponseBody("bad response"), e);
        }

        using (new AssertionScope())
        {
            responseMessage.StatusCode.Should().Be(HttpStatusCode.OK);
            
            response.room_id.Should().Be(body.room_id);
            response.isSender.Should().Be(body.isSender);
            response.message.Should().Be(body.message);
            response.User_id.Should().Be(body.User_id);
        }
    }
}