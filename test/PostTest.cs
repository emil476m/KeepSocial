using System.ComponentModel.DataAnnotations;
using System.Net;
using System.Net.Http.Headers;
using System.Net.Http.Json;
using FluentAssertions;
using FluentAssertions.Execution;
using Infastructure;
using Newtonsoft.Json;

namespace test;


[TestFixture]
public class PostTest
{
    
     private string resetbd = $@"
DROP SCHEMA IF EXISTS keepsocial CASCADE;
CREATE SCHEMA keepsocial;

create table if not exists keepsocial.users (
    id integer generated by default as identity,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL,
    birthday DATE,
    isDeleted boolean NOT NULL,
    constraint userpk
        primary key (id)
);

create table if not exists keepsocial.password_hash (
    user_id integer,
    hash VARCHAR(350) NOT NULL ,
    salt VARCHAR(180) NOT NULL ,
    algorithm VARCHAR(12) NOT NULL ,
    FOREIGN KEY(user_id) REFERENCES keepsocial.users(id)
);

create table if not exists keepsocial.chatrooms (
    rom_id integer generated by default as identity,
    rom_name VARCHAR,

    primary key (rom_id)
);

create table if not exists keepsocial.chatroomUsersRealation (
    rom_id integer ,
    user_id integer,

    FOREIGN KEY(rom_id) REFERENCES keepsocial.chatrooms(rom_id),
    FOREIGN KEY(user_id) REFERENCES keepsocial.users(id)
);

create table if not exists keepsocial.messages (
    rom_id integer,
    user_id integer,
    message VARCHAR,

    FOREIGN KEY(rom_id) REFERENCES keepsocial.chatrooms(rom_id),
    FOREIGN KEY(user_id) REFERENCES keepsocial.users(id)
);

create table if not exists keepsocial.posts
(
    id integer generated by default as identity,
    author_id integer not null ,
    text VARCHAR(500) not null ,
    img_url VARCHAR,
    created timestamp not null,
    constraint postpk
        primary key (id),
    foreign key(author_id) references keepsocial.users(id)
);

insert into keepsocial.users(id,name,email,birthday,isdeleted) values (111,'test tester','test@email.com',date('2023-02-24'),false);
insert into keepsocial.password_hash(user_id,hash,salt,algorithm) values (111,'6Po8CEcjkfC5Scoze2n5WoI7yLFePCZlEmQNPY9M0UFP0ghMegnM2t3k8HpcE/EkdYxOPJDj1XBM9J47eOdON6N9thahuXvlbY3D8Ag/y1JgHNw2ea6E5l1VWVSz7kCrQudnazfVTMQuce4emRjSLSAZAaoF55zXmBYjFOqZ5xX13TV5/UJUPkKf7uRKGNyTf1o/LlnZqmMsziF6unmCZTBgpn3W1oHr3zSh2Xm7dohmVN8+eDXPchVhUTha4u7QG75EFsILQfgALPDt3N/DUX/pHKBTVGcMAQWX1zAKyXdNPsp3MtiioBFnsJ+Zpn37mTRWNAPUMojvFekGGvb9zQ==','WwoEFhsDKJMTyb4GzbfV8inzImVI404JZSeQXWoptlUaZmuoTrKq5b/5WIqIXpeDuny7WbgDf3Hi3SuK1EmPNqTxGNbSJk3bPxufdhxwlaPXHa4vPOajEqdtLDqD+WpjvF5QK/oSTS/XB8Rj0oY0BOqW/k+KBiMTjyNc2fjJEpQ=','argon2id');
";
    
    
    private string apirUrl = "";
    private HttpClient _httpClient;

    [SetUp]
    public void Setup()
    {
        _httpClient = new HttpClient();
        _httpClient.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", Environment.GetEnvironmentVariable("testToken"));
        apirUrl = "http://localhost:5000/api/post";
    }


    [Test]
    public async Task createPostValid()
    {
        Helper.TriggerRebuild(resetbd);

        var postdto = new PostDto
        {
            id = 0,
            authorId = 0,
            text = "stuff and things",
            imgurl = "ewyfhwiurdwfnc",
        };
        var cred = new Credentials { email = "test@email.com", password = "testtest" };
        
        HttpResponseMessage loginresponse;
        try
        {
            loginresponse = await _httpClient.PostAsJsonAsync("http://localhost:5000/api/account/login", cred);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        HttpResponseMessage responseMessage;
        try
        {
            responseMessage = await _httpClient.PostAsJsonAsync(apirUrl, postdto);
            TestContext.WriteLine("full body response: " + await responseMessage.Content.ReadAsStringAsync());
        }
        catch (Exception e)
        {
            throw new Exception("Failed to create the post", e);
        }

        Post response;
        try
        {
            response = JsonConvert.DeserializeObject<Post>(await responseMessage.Content.ReadAsStringAsync()) ??
                       throw new InvalidOperationException();
        }
        catch (Exception e)
        {
            throw new Exception(Helper.BadResponseBody("bad response"), e);
        }
        using (new AssertionScope())
        {
            responseMessage.StatusCode.Should().Be(HttpStatusCode.OK);
            response.authorId.Should().NotBe(postdto.authorId);
            response.id.Should().NotBe(postdto.id);
            response.text.Should().Be(postdto.text);
            response.imgurl.Should().Be(postdto.imgurl);
        }
    }
}

public class PostDto
{
    public int id { get; set; }
    public int authorId { get; set; }
    [MinLength(3)]
    [MaxLength(500)]
    public string text { get; set; }
    public string? imgurl { get; set; }
    public DateTimeOffset? created { get; set; }
}

